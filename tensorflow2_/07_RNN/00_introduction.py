import os, sys, time

"""
    [ 概念 ]
        1. Embedding 
            one-hot 编码:
                word -> index -> [0, 0, ... , 0, 1, 0, ... , 0]
                对应稀疏向量
            
            dense embedding (密集编码):
                word -> index -> [1.2, 4.2, 2.9, ... , 0.1]
                对应密集向量
        
        2. 变长输入处理
            -> 通过 padding 补齐
                使用默认值填充  默认制自己定义
                word index: [3, 2, 5, 9, 1] -> padding -> [3, 2, 5, 9, 1,0, 0, 0, 0, 0]
                
            -> 通过 截断 控制数据长度
            
            -> 合并
                假如 数据的 shape = [n, 10]  n 为不确定的值
                使用 Global avg pooling 将横向维度消除 是数据变成 长度为 10 的向量
                
                
        [合并 + padding]
            缺点: 
                1. 信息丢失
                    多个 embedding 合并
                    pad会产生噪音、 无主次
                2. 无效计算过多 低效
                    有太多的 padding
        
        3. 序列式问题
            输入 对 输出
            一 对 一 : 普通的神经网络 包括 CNN
            一 对 多 ：图片生成描述 -> 输入是一张图片，输出是一个句子
            多 对 一 ：文本情感分析 -> 输入是多个词， 输出是情感类别
            多 对 多 ：机器翻译     -> 输入是中文， 输出是英文
                非实时的 因为 在全部输入完成后才会有第一个输出
                
            多 对 多 ：视频解说
                实时的 有输入马上有输出
            
             
            
            
            
        4. 循环神经网络 ( RNN )
            为了更好的解决序列式问题
            普通神经网络也可以解决，但是会出现 [合并 + padding] 的缺点
            
            公式
                St = Fw(St-1, Xt)
                循环期间 使用同一组参数与激活函数
                
                St   -> 新状态
                St-1 -> 旧状态 上一步状态
                Xt   -> 输入
                Fw   -> RNN 的计算过程
                
            特点
                1. 维护了一个状态 状态由当前步传到下一步
                2. 循环期间 使用同一组参数与激活函数
        
        5. LSTM
            通过选择性机制 解决 普通rnn的信息不能长久传播
            
            选择性机制
                选择性输出
                选择性输入
                选择性遗忘
                
            选择性 -> 门
                Sigmoid -> [0, 1]
            
        6. subword
            介于 char 和 word 之间的粒度
            hello -> 'he'  'll'  'o'
        
"""
